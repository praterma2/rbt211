
blinkPWNClassV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000138  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000001ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ff  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000659  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000147  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037e  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006b  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_15>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 89 00 	call	0x112	; 0x112 <main>
  9e:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
	TIMSK0 |= (1 << OCIE1B);
	TIMSK0 |= (1<< TOIE0);
	sei();
}

ISR(TIMER0_OVF_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	//on overflow do this
	if(on == 1){
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	11 f4       	brne	.+4      	; 0xbe <__vector_16+0x18>
		PORTB |= 32;
  ba:	2d 9a       	sbi	0x05, 5	; 5
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <__vector_16+0x1a>
	} else {
		PORTB &= ~(32);
  be:	2d 98       	cbi	0x05, 5	; 5
	}
	
	OCR0B = brightnessA;
  c0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <brightnessA>
  c4:	88 bd       	out	0x28, r24	; 40
	ovrFloCt++;
  c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if(ovrFloCt == 200){
  d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  d4:	88 3c       	cpi	r24, 0xC8	; 200
  d6:	61 f4       	brne	.+24     	; 0xf0 <__vector_16+0x4a>
		if (on == 1){
  d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	19 f4       	brne	.+6      	; 0xe6 <__vector_16+0x40>
			on = 0;
  e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	03 c0       	rjmp	.+6      	; 0xec <__vector_16+0x46>
		} else {
			on = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		ovrFloCt = 0;
  ec:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_15>:

ISR(TIMER0_COMPB_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
	PORTB &= ~(32);
 106:	2d 98       	cbi	0x05, 5	; 5
}
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:

int main(void)
{
    DDRB |= 32;
 112:	25 9a       	sbi	0x04, 5	; 4
volatile uint8_t on = 1;
volatile uint8_t ovrFloCt = 0;

//setup for timer
static inline void initTimer0(void){
	TCCR0B |= (1 << CS01 | 1 << CS00);
 114:	85 b5       	in	r24, 0x25	; 37
 116:	83 60       	ori	r24, 0x03	; 3
 118:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE1B);
 11a:	ee e6       	ldi	r30, 0x6E	; 110
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	84 60       	ori	r24, 0x04	; 4
 122:	80 83       	st	Z, r24
	TIMSK0 |= (1<< TOIE0);
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
	sei();
 12a:	78 94       	sei

int main(void)
{
    DDRB |= 32;
	initTimer0();
	brightnessA = 255;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <brightnessA>
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x20>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
