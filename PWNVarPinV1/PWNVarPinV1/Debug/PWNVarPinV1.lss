
PWNVarPinV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d9  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d6  00000000  00000000  00000a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030d  00000000  00000000  00001123  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040c  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015f  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_14>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_15>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  88:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
	TIMSK0 |= ((1 << OCIE0A) | (1 << OCIE1B));
	TIMSK0 |= (1 << TOIE0);                 /* overflow interrupt enable */
	sei();
}

ISR(TIMER0_OVF_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	PORTD = 0xff;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8b b9       	out	0x0b, r24	; 11
	OCR0A = brightnessA;
  a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <brightnessA>
  a4:	87 bd       	out	0x27, r24	; 39
	OCR0B = brightnessB;
  a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  aa:	88 bd       	out	0x28, r24	; 40
}
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <__vector_14>:
ISR(TIMER0_COMPA_vect) {
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
	PORTD &= 0b11110000;                    /* turn off low four LEDs */
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	8b b9       	out	0x0b, r24	; 11
}
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_15>:
ISR(TIMER0_COMPB_vect) {
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
	PORTD &= 0b00001111;                   /* turn off high four LEDs */
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8f 70       	andi	r24, 0x0F	; 15
  e6:	8b b9       	out	0x0b, r24	; 11
}
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <main>:

int main(void) {
	// -------- Inits --------- //

	uint8_t i;
	DDRD = 0xff;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8a b9       	out	0x0a, r24	; 10
volatile uint8_t brightnessB;

// -------- Functions --------- //
static inline void initTimer0(void) {
	/* must be /64 or more for ISR timing */
	TCCR0B |= (1 << CS01) | (1 << CS00);
  f8:	85 b5       	in	r24, 0x25	; 37
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	85 bd       	out	0x25, r24	; 37
	/* both output compare interrupts */
	TIMSK0 |= ((1 << OCIE0A) | (1 << OCIE1B));
  fe:	ee e6       	ldi	r30, 0x6E	; 110
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	86 60       	ori	r24, 0x06	; 6
 106:	80 83       	st	Z, r24
	TIMSK0 |= (1 << TOIE0);                 /* overflow interrupt enable */
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24
	sei();
 10e:	78 94       	sei
	initTimer0();

	// ------ Event loop ------ //
	while (1) {

		for (i = 0; i < 255; i++) {
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	8f 3f       	cpi	r24, 0xFF	; 255
 114:	71 f0       	breq	.+28     	; 0x132 <main+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	ef ed       	ldi	r30, 0xDF	; 223
 118:	fe e2       	ldi	r31, 0x2E	; 46
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x26>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x2c>
 120:	00 00       	nop
			_delay_ms(DELAY);
			brightnessA = i;
 122:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <brightnessA>
			brightnessB = 255 - i;
 126:	98 2f       	mov	r25, r24
 128:	90 95       	com	r25
 12a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
	initTimer0();

	// ------ Event loop ------ //
	while (1) {

		for (i = 0; i < 255; i++) {
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	f0 cf       	rjmp	.-32     	; 0x112 <main+0x1e>
 132:	8e ef       	ldi	r24, 0xFE	; 254
			_delay_ms(DELAY);
			brightnessA = i;
			brightnessB = 255 - i;
		}

		for (i = 254; i > 0; i--) {
 134:	88 23       	and	r24, r24
 136:	61 f3       	breq	.-40     	; 0x110 <main+0x1c>
 138:	ef ed       	ldi	r30, 0xDF	; 223
 13a:	fe e2       	ldi	r31, 0x2E	; 46
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x48>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x4e>
 142:	00 00       	nop
			_delay_ms(DELAY);
			brightnessA = i;
 144:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <brightnessA>
			brightnessB = 255 - i;
 148:	98 2f       	mov	r25, r24
 14a:	90 95       	com	r25
 14c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
			_delay_ms(DELAY);
			brightnessA = i;
			brightnessB = 255 - i;
		}

		for (i = 254; i > 0; i--) {
 150:	81 50       	subi	r24, 0x01	; 1
 152:	f0 cf       	rjmp	.-32     	; 0x134 <main+0x40>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
