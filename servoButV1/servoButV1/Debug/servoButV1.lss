
servoButV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00000e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000140d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define TOP_VALUE 39999//50 HZ 39999


int main(void)
{//TIMSK1 |= (1 << TOIE1) | (1 << OCIE1A);
	ICR1 = TOP_VALUE;
  80:	8f e3       	ldi	r24, 0x3F	; 63
  82:	9c e9       	ldi	r25, 0x9C	; 156
  84:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  88:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCCR1A |= (1 << WGM11);
  8c:	e0 e8       	ldi	r30, 0x80	; 128
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	82 60       	ori	r24, 0x02	; 2
  94:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1A1); // Sets OC1A as direct output PB1
  96:	80 81       	ld	r24, Z
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11); // Prescaler of 8
  9c:	e1 e8       	ldi	r30, 0x81	; 129
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8a 61       	ori	r24, 0x1A	; 26
  a4:	80 83       	st	Z, r24
	
	DDRB |= (1 << PB1);
  a6:	21 9a       	sbi	0x04, 1	; 4
	DDRD |= (1 << PD6);
  a8:	56 9a       	sbi	0x0a, 6	; 10
	
	OCR1A = PULSE_MIN;
  aa:	87 ee       	ldi	r24, 0xE7	; 231
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
    //input B0
	DDRB & ~(1 << PB0);
  b6:	84 b1       	in	r24, 0x04	; 4
	
	
	DDRD &= ~(192);
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	8f 73       	andi	r24, 0x3F	; 63
  bc:	8a b9       	out	0x0a, r24	; 10
	
	//PULLUP
	PORTB |= (1 << PB0);
  be:	28 9a       	sbi	0x05, 0	; 5
	PORTD |= (192);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	80 6c       	ori	r24, 0xC0	; 192
  c4:	8b b9       	out	0x0b, r24	; 11
		} else if(PIND & (1 << PIND7)){
			//go med
			OCR1A = PULSE_MID;
		} else if(PIND & (1 << PIND6)){
			//go high
			OCR1A = PULSE_MAX;
  c6:	e8 e8       	ldi	r30, 0x88	; 136
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	28 e8       	ldi	r18, 0x88	; 136
  cc:	33 e1       	ldi	r19, 0x13	; 19
		if((PINB & (1 << PINB0)) == 0){
			//go low
			OCR1A = PULSE_MIN;
		} else if(PIND & (1 << PIND7)){
			//go med
			OCR1A = PULSE_MID;
  ce:	43 e5       	ldi	r20, 0x53	; 83
  d0:	5b e0       	ldi	r21, 0x0B	; 11
	
    while (1) 
    {
		if((PINB & (1 << PINB0)) == 0){
			//go low
			OCR1A = PULSE_MIN;
  d2:	87 ee       	ldi	r24, 0xE7	; 231
  d4:	93 e0       	ldi	r25, 0x03	; 3
	PORTB |= (1 << PB0);
	PORTD |= (192);
	
    while (1) 
    {
		if((PINB & (1 << PINB0)) == 0){
  d6:	18 99       	sbic	0x03, 0	; 3
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <main+0x60>
			//go low
			OCR1A = PULSE_MIN;
  da:	91 83       	std	Z+1, r25	; 0x01
  dc:	80 83       	st	Z, r24
  de:	fb cf       	rjmp	.-10     	; 0xd6 <main+0x56>
		} else if(PIND & (1 << PIND7)){
  e0:	4f 9b       	sbis	0x09, 7	; 9
  e2:	03 c0       	rjmp	.+6      	; 0xea <main+0x6a>
			//go med
			OCR1A = PULSE_MID;
  e4:	51 83       	std	Z+1, r21	; 0x01
  e6:	40 83       	st	Z, r20
  e8:	f6 cf       	rjmp	.-20     	; 0xd6 <main+0x56>
		} else if(PIND & (1 << PIND6)){
  ea:	4e 9b       	sbis	0x09, 6	; 9
  ec:	f4 cf       	rjmp	.-24     	; 0xd6 <main+0x56>
			//go high
			OCR1A = PULSE_MAX;
  ee:	31 83       	std	Z+1, r19	; 0x01
  f0:	20 83       	st	Z, r18
  f2:	f1 cf       	rjmp	.-30     	; 0xd6 <main+0x56>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
