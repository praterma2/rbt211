
motorDriveV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000705  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000648  00000000  00000000  0000098d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000285  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000380  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_15>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  88:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
	TIMSK0 |= (1 << OCIE1B);
	TIMSK0 |= (1<< TOIE0);
	sei();
}

ISR(TIMER0_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	/*if(on == 1){
		PORTB |= 32;
		} else {
		PORTB &= ~(32);
	}*/
	PORTB |= 32;
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	85 b9       	out	0x05, r24	; 5
	//OCR0B = brightnessA;
	ovrFloCt++;
  a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(ovrFloCt == 1600){
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c0:	80 34       	cpi	r24, 0x40	; 64
  c2:	96 40       	sbci	r25, 0x06	; 6
  c4:	51 f5       	brne	.+84     	; 0x11a <__vector_16+0x8a>
		if (phase == 0){
  c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <phase>
  ca:	81 11       	cpse	r24, r1
  cc:	06 c0       	rjmp	.+12     	; 0xda <__vector_16+0x4a>
			OCR0B = 128;
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	88 bd       	out	0x28, r24	; 40
			phase = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <phase>
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__vector_16+0x82>
		} else if (phase == 1){
  da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <phase>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	31 f4       	brne	.+12     	; 0xee <__vector_16+0x5e>
			OCR0B = 191;
  e2:	8f eb       	ldi	r24, 0xBF	; 191
  e4:	88 bd       	out	0x28, r24	; 40
			phase = 2;
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <phase>
  ec:	12 c0       	rjmp	.+36     	; 0x112 <__vector_16+0x82>
		} else if (phase == 2){
  ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <phase>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	31 f4       	brne	.+12     	; 0x102 <__vector_16+0x72>
			OCR0B = 64;
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	88 bd       	out	0x28, r24	; 40
			phase = 3;
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <phase>
 100:	08 c0       	rjmp	.+16     	; 0x112 <__vector_16+0x82>
		} else if (phase == 3){
 102:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <phase>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	21 f4       	brne	.+8      	; 0x112 <__vector_16+0x82>
			OCR0B = 255;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	88 bd       	out	0x28, r24	; 40
			phase = 0;
 10e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <phase>
		}
		ovrFloCt = 0;
 112:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <__vector_15>:

ISR(TIMER0_COMPB_vect){
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
	PORTB &= ~(32);
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8f 7d       	andi	r24, 0xDF	; 223
 13a:	85 b9       	out	0x05, r24	; 5
}
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <main>:

int main(void)
{
    DDRB |= 32;
 148:	84 b1       	in	r24, 0x04	; 4
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	84 b9       	out	0x04, r24	; 4
volatile uint8_t phase = 0;
volatile int ovrFloCt = 0;

//setup for timer
static inline void initTimer0(void){
	TCCR0B |= (1 << CS01 | 1 << CS00);
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	83 60       	ori	r24, 0x03	; 3
 152:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE1B);
 154:	ee e6       	ldi	r30, 0x6E	; 110
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	80 83       	st	Z, r24
	TIMSK0 |= (1<< TOIE0);
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	sei();
 164:	78 94       	sei
int main(void)
{
    DDRB |= 32;
	
	initTimer0();
	brightnessA = 25;
 166:	89 e1       	ldi	r24, 0x19	; 25
 168:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <brightnessA>
 16c:	ff cf       	rjmp	.-2      	; 0x16c <main+0x24>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
