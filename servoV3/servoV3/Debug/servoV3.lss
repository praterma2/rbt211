
servoV3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000851  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ad  00000000  00000000  00000a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000309  00000000  00000000  00001142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038a  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a6  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{

	
	//TIMSK1 |= (1 << TOIE1) | (1 << OCIE1A);
	ICR1 = TOP_VALUE;
  80:	8f e3       	ldi	r24, 0x3F	; 63
  82:	9c e9       	ldi	r25, 0x9C	; 156
  84:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  88:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCCR1A |= (1 << WGM11);
  8c:	e0 e8       	ldi	r30, 0x80	; 128
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	82 60       	ori	r24, 0x02	; 2
  94:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1A1); // Sets OC1A as direct output PB1
  96:	80 81       	ld	r24, Z
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11); // Prescaler of 8
  9c:	e1 e8       	ldi	r30, 0x81	; 129
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8a 61       	ori	r24, 0x1A	; 26
  a4:	80 83       	st	Z, r24
	
	DDRB |= (1 << PB1);
  a6:	21 9a       	sbi	0x04, 1	; 4
	DDRD |= (1 << PD6);
  a8:	56 9a       	sbi	0x0a, 6	; 10
	
	OCR1A = PULSE_MIN;
  aa:	88 ee       	ldi	r24, 0xE8	; 232
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    while (1) 
    {
		for (uint16_t i = PULSE_MIN; i < PULSE_MAX; i = i + 20)
		{
			//PORTD |= (1 << PD6);
			OCR1A = i;
  b6:	e8 e8       	ldi	r30, 0x88	; 136
  b8:	f0 e0       	ldi	r31, 0x00	; 0
			OCR1A = i;
			_delay_ms(10);
			
		}
		
 		OCR1A = PULSE_MIN;
  ba:	68 ee       	ldi	r22, 0xE8	; 232
  bc:	73 e0       	ldi	r23, 0x03	; 3
		_delay_ms(500);
		OCR1A = PULSE_MID;
  be:	24 e5       	ldi	r18, 0x54	; 84
  c0:	3b e0       	ldi	r19, 0x0B	; 11
		_delay_ms(500);
		OCR1A = PULSE_MAX;
  c2:	40 ec       	ldi	r20, 0xC0	; 192
  c4:	52 e1       	ldi	r21, 0x12	; 18
	//PORTD &= ~(1 << PD6); // LED used for debugging
	
    /* Replace with your application code */
    while (1) 
    {
		for (uint16_t i = PULSE_MIN; i < PULSE_MAX; i = i + 20)
  c6:	88 ee       	ldi	r24, 0xE8	; 232
  c8:	93 e0       	ldi	r25, 0x03	; 3
		{
			//PORTD |= (1 << PD6);
			OCR1A = i;
  ca:	91 83       	std	Z+1, r25	; 0x01
  cc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	af e3       	ldi	r26, 0x3F	; 63
  d0:	bc e9       	ldi	r27, 0x9C	; 156
  d2:	11 97       	sbiw	r26, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x52>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
	//PORTD &= ~(1 << PD6); // LED used for debugging
	
    /* Replace with your application code */
    while (1) 
    {
		for (uint16_t i = PULSE_MIN; i < PULSE_MAX; i = i + 20)
  da:	44 96       	adiw	r24, 0x14	; 20
  dc:	80 3c       	cpi	r24, 0xC0	; 192
  de:	b2 e1       	ldi	r27, 0x12	; 18
  e0:	9b 07       	cpc	r25, r27
  e2:	99 f7       	brne	.-26     	; 0xca <main+0x4a>
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	92 e1       	ldi	r25, 0x12	; 18
		}
		
		for (uint16_t i = PULSE_MAX; i > PULSE_MIN; i = i - 20)
		{
			//PORTD &= ~(1 << PD6);
			OCR1A = i;
  e8:	91 83       	std	Z+1, r25	; 0x01
  ea:	80 83       	st	Z, r24
  ec:	af e3       	ldi	r26, 0x3F	; 63
  ee:	bc e9       	ldi	r27, 0x9C	; 156
  f0:	11 97       	sbiw	r26, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x70>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x76>
  f6:	00 00       	nop
			_delay_ms(10);
			
		
		}
		
		for (uint16_t i = PULSE_MAX; i > PULSE_MIN; i = i - 20)
  f8:	44 97       	sbiw	r24, 0x14	; 20
  fa:	88 3e       	cpi	r24, 0xE8	; 232
  fc:	b3 e0       	ldi	r27, 0x03	; 3
  fe:	9b 07       	cpc	r25, r27
 100:	99 f7       	brne	.-26     	; 0xe8 <main+0x68>
			OCR1A = i;
			_delay_ms(10);
			
		}
		
 		OCR1A = PULSE_MIN;
 102:	71 83       	std	Z+1, r23	; 0x01
 104:	60 83       	st	Z, r22
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	99 e6       	ldi	r25, 0x69	; 105
 10a:	a8 e1       	ldi	r26, 0x18	; 24
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	a0 40       	sbci	r26, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x8c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x96>
 116:	00 00       	nop
		_delay_ms(500);
		OCR1A = PULSE_MID;
 118:	31 83       	std	Z+1, r19	; 0x01
 11a:	20 83       	st	Z, r18
 11c:	bf ef       	ldi	r27, 0xFF	; 255
 11e:	89 e6       	ldi	r24, 0x69	; 105
 120:	98 e1       	ldi	r25, 0x18	; 24
 122:	b1 50       	subi	r27, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0xa2>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0xac>
 12c:	00 00       	nop
		_delay_ms(500);
		OCR1A = PULSE_MAX;
 12e:	51 83       	std	Z+1, r21	; 0x01
 130:	40 83       	st	Z, r20
 132:	af ef       	ldi	r26, 0xFF	; 255
 134:	b9 e6       	ldi	r27, 0x69	; 105
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	a1 50       	subi	r26, 0x01	; 1
 13a:	b0 40       	sbci	r27, 0x00	; 0
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0xb8>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xc2>
 142:	00 00       	nop
		_delay_ms(500);
		OCR1A = PULSE_MID;
 144:	31 83       	std	Z+1, r19	; 0x01
 146:	20 83       	st	Z, r18
 148:	9f ef       	ldi	r25, 0xFF	; 255
 14a:	a9 e6       	ldi	r26, 0x69	; 105
 14c:	b8 e1       	ldi	r27, 0x18	; 24
 14e:	91 50       	subi	r25, 0x01	; 1
 150:	a0 40       	sbci	r26, 0x00	; 0
 152:	b0 40       	sbci	r27, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0xce>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xd8>
 158:	00 00       	nop
 15a:	b5 cf       	rjmp	.-150    	; 0xc6 <main+0x46>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
